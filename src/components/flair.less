// Note: don't forget to rely on `extend` to reduce the effect
// of repeated mixin use on file weight!

// Outlined background
// ===================

#flair() {
  .outlined-bg() {
    &:extend(.__flair_outlined-bg all);
    &:extend(.__flair_outlined-bg_default all);
  }
  .outlined-bg-dark() {
    &:extend(.__flair_outlined-bg all);
    &:extend(.__flair_outlined-bg_dark all);
  }
}

.__flair_outlined-bg {
  z-index: 1;
  &:first-child {
    margin-top: -@gutter;
  }
  margin-top: 0;
  padding-top: @gutter*2;

  position: relative;
  #fill-width();
  & > div {
    #container();
    position: relative;
  }
  &::before {
    content: "";
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: left center;
  }
}

// Variants

.__flair_outlined-bg_default {
  &::before {
    #svg.background-outlines.blue-dark;
    opacity: 0.08;
  }
}

.__flair_outlined-bg_dark {
  color: #theme.color[white];
  background-color: #theme.color[blue-dark];
  h1 {
    color: #theme.color[white];
  }
  h2 {
    color: #theme.color[green];
  }
  a {
    color: inherit;
  }
  &::before {
    #svg.background-outlines.white;
    opacity: 0.3;
  }

}

// Big angles
// ==========

#flair() {
  .big-angles {
    // Unit-less
    @_top-height: 362;
    @_top-width: 1600;
    @_top-full-width: 4000;
    @_top-full-height: 2066;

    @_bottom-height: 250;
    @_bottom-width: 1600;
    @_bottom-full-width: 4000;
    @_bottom-full-height: 516;

    * {
      position: relative;
    }

    position: relative;
    #fill-width();
    padding-top: 75 * @unit;
    padding-bottom: 0;
    margin-top: @_top-height * @unit / 2 + 2*@gutter;
    margin-bottom: @_bottom-height * @unit + 2*@gutter;

    & > div {
      #container();
    }

    &::before, &::after {
      pointer-events: none;
      content: "";
      display: block;
      position: absolute;
      left: 0;
      right: 0;

      background-repeat: no-repeat;
      background-size: auto 100%;
      overflow: hidden;
    }

    &::after {
      bottom: 100%;

      height: @_top-full-height * @unit;
      #svg.big-angles-1();
      background-position: 41% 100%;
      #screen-sm-min({
        background-position: 43% 100%;
      });
      #screen-md-min({
        background-position: 45% 100%;
      });
      #screen-lg-min({
        background-position: 48% 100%;
      });

      // This is to remove the gap between the pseudo-element
      // and the element at non-integer pixel sizes
      transform: translateY(2*@unit);
    }

    &::before {
      top: calc(100% - 168*@unit);

      height: @_bottom-full-height * @unit;
      #svg.big-angles-2();
      background-position: 61% 100%;
      #screen-lg-min({
        background-position: 59% 100%;
      });

      // This is to remove the gap between the pseudo-element
      // and the element at non-integer pixel sizes
      transform: translateY(-2*@unit);
    }
  }
}

// Angled title
// ============

// TODO: Add the proper SVG for this flair on sm+.
//       (I don't have the proper files.)

#flair() {
  .angled-title(
    @foreground: #theme.color[white],
    @background: #theme.color[blue-dark],
  ) {
    color: @foreground;
    &:extend(.__flair_angled-title all);
    background-color: @background;
  }
}

.__flair_angled-title {
  #fill-width();
  position: relative;
  margin-bottom: @gutter * 4;
  padding-top: @gutter * 2;
  padding-bottom: @gutter * 2;
  display: flex;
  flex-flow: column;
  justify-content: end;

  & > div {
    #container();

    color: #theme.color[white];
    margin-top: 0;
    margin-bottom: 0.5*@gutter;

    & > a {
      color: #theme.color[white];
    }
  }

  // extend in a media query doesn't work.
  #svg.title-angle.white;
  // so we instead undo the background-image.
  #screen-xs-max({
    background-image: none !important;
    margin-bottom: 3*@gutter;
    text-align: center;
    padding-top: 3.5*@gutter;
    padding-bottom: 3.5*@gutter;
    font-size: 115%;
  });
  #screen-sm-min({
    background-repeat: no-repeat;
    background-position: 44% 100%;
    background-size: auto 100%;
    min-height: 240*@unit;
    overflow: hidden;

    // Prevent "aliasing" line to be visible.
    &::after {
      content: "";
      position: absolute;
      bottom: -3*@unit;
      left: 0;
      right: 0;
      height: 6*@unit;
      background: #theme.color[white];
    }
  });
  #screen-md-min({
    background-position: 46% 100%;
  });
  #screen-lg-min({
    background-position: 49% 100%;
  });
  &:first-child, header + & {
    margin-top: -@gutter;
  }
  & > h1 {
    #container();

    color: inherit;
    margin-top: 0;

    #screen-sm-min({
      margin-bottom: 4.5*@gutter;
    });
  }
}

//
// Wedge shaped
// ============
//
// The height of the diagonal section stays constant; the angle of the line
// changes according to the width of the viewport.

#flair() {
  .wedge-shaped {
    .base(
      @before: right,
      @after: right,
      @size: 64*@unit,
      @size_before: @size,
      @size_after: @size,
      @position_before: outside,
      @position_after: outside,

      // In percent
      @scale_before: 100%,
      @scale_after: 100%,

      // Units are needed for calc()
      @margin-bottom: 0rem,
      @margin-top: 0rem
    ) {
      @background-color: #theme.color[background];
      position: relative;
      margin-top: calc(@size + @margin-top);
      margin-bottom: calc(@size + @margin-bottom);

      &::before, &::after {
        content: "";
        display: block;
        background-repeat: no-repeat;
        background-position: top center;

        position: absolute;
        left: 0;
        right: 0;
        width: 100%;
      }

      &::before {
        height: @size_before;
        bottom: calc(100% - 1*@unit);
        transform: scaleY(-1);
        background-size: 100% @scale_before;
      }
      &::after {
        height: @size_after;
        top: calc(100% - 1*@unit);
        background-size: 100% @scale_after;
      }

      &::before when (@before = left) {
        transform: scaleX(-1) scaleY(-1);
      }
      &::after when (@after = left) {
        transform: scaleX(-1);
      }
      &::before when (@before = none) {
        display: none;
      }
      &::after when (@after = none) {
        display: none;
      }
      &::before when (@position_before = inside) {
        bottom: initial;
        top: 0;
        background-color: @background-color;
      }
      &::after when (@position_after = inside) {
        top: initial;
        bottom: 0;
        background-color: @background-color;
      }
    }

    .blue-dark() {
      background-color: #theme.color[blue-dark];
      &::before, &::after {
        #svg.multipurpose-wedge.blue-dark();
      }
    }

    .blue-lighter() {
      background-color: #theme.color[blue-lighter];
      &::before, &::after {
        #svg.multipurpose-wedge.blue-lighter();
      }
    }
  }
}
